# Generated by mk-workflows.

name: 'windows-qa'
on:
  push:
    branches-ignore:
      - release
  pull_request:
    branches-ignore:
      - release
  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: 'windows-qa-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  windows-qa-stable-all-features:
    runs-on: windows-2022
    # Containers are not supported on Windows.
    # container: ghcr.io/pragmatrix/rust-skia-windows:latest
    env: 
      SKIA_DEBUG: 0

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install Rust
      uses: hecrj/setup-rust-action@v1.4.0
      with:
        rust-version: stable

    - name: Install Clippy
      run: rustup component add clippy
      shell: bash

    - name: Python Version
      run: python --version

    # 19.1.7 breaks the Skia build, see <https://github.com/rust-skia/rust-skia/issues/1109> for details.
    - name: Install LLVM 19.1.5
      run: choco install llvm --version=19.1.5 --allow-downgrade

    - name: Install Ninja
      run: choco install ninja
    - name: 'Install Rust target x86_64-pc-windows-msvc'
      shell: bash
      run: |
        rustup target add x86_64-pc-windows-msvc

    - name: 'Build skia-safe for x86_64-pc-windows-msvc with features d3d,gl,svg,textlayout,ureq,vulkan,vulkan-window,webp'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-pc-windows-msvc
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-pc-windows-msvc26-clang.exe
          export CXX_${TARGET}=x86_64-pc-windows-msvc26-clang++.exe
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-pc-windows-msvc26-clang.exe
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "d3d,gl,svg,textlayout,ureq,vulkan,vulkan-window,webp" --target x86_64-pc-windows-msvc
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features "d3d,gl,svg,textlayout,ureq,vulkan,vulkan-window,webp" --all-targets --target x86_64-pc-windows-msvc -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features "d3d,gl,svg,textlayout,ureq,vulkan,vulkan-window,webp" --all-targets --target x86_64-pc-windows-msvc -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: true
      run: |
        cargo run --release --features "d3d,gl,svg,textlayout,ureq,vulkan,vulkan-window,webp" --target x86_64-pc-windows-msvc "${{ env.SKIA_STAGING_PATH }}/skia-org" --driver cpu --driver pdf --driver svg

    - name: 'Upload skia-org example images'
      if: true
      uses: actions/upload-artifact@v4.6.0
      with:
        name: skia-org-images-x86_64-pc-windows-msvc
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: false
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: false
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true
  windows-qa-beta-all-features:
    runs-on: windows-2022
    # Containers are not supported on Windows.
    # container: ghcr.io/pragmatrix/rust-skia-windows:latest
    env: 
      SKIA_DEBUG: 0

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install Rust
      uses: hecrj/setup-rust-action@v1.4.0
      with:
        rust-version: beta

    - name: Install Clippy
      run: rustup component add clippy
      shell: bash

    - name: Python Version
      run: python --version

    # 19.1.7 breaks the Skia build, see <https://github.com/rust-skia/rust-skia/issues/1109> for details.
    - name: Install LLVM 19.1.5
      run: choco install llvm --version=19.1.5 --allow-downgrade

    - name: Install Ninja
      run: choco install ninja
    - name: 'Install Rust target x86_64-pc-windows-msvc'
      shell: bash
      run: |
        rustup target add x86_64-pc-windows-msvc

    - name: 'Build skia-safe for x86_64-pc-windows-msvc with features d3d,gl,svg,textlayout,ureq,vulkan,vulkan-window,webp'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-pc-windows-msvc
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-pc-windows-msvc26-clang.exe
          export CXX_${TARGET}=x86_64-pc-windows-msvc26-clang++.exe
          export AR_${TARGET}=llvm-ar
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-pc-windows-msvc26-clang.exe
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        if [ "false" == "true" ]; then
          source /emsdk/emsdk_env.sh
        fi
        cargo clean
        cargo build -p skia-safe --release --features "d3d,gl,svg,textlayout,ureq,vulkan,vulkan-window,webp" --target x86_64-pc-windows-msvc
        echo "SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")" >> ${GITHUB_ENV}
        echo "SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")" >> ${GITHUB_ENV}
        echo "SKIA_STAGING_PATH=${BUILD_ARTIFACTSTAGINGDIRECTORY}" >> ${GITHUB_ENV}
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
        EMCC_CFLAGS: "-s ERROR_ON_UNDEFINED_SYMBOLS=0 -s MAX_WEBGL_VERSION=2"

    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features "d3d,gl,svg,textlayout,ureq,vulkan,vulkan-window,webp" --all-targets --target x86_64-pc-windows-msvc -- -D warnings

    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features "d3d,gl,svg,textlayout,ureq,vulkan,vulkan-window,webp" --all-targets --target x86_64-pc-windows-msvc -- --nocapture

    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features "d3d,gl,svg,textlayout,ureq,vulkan,vulkan-window,webp" --target x86_64-pc-windows-msvc "${{ env.SKIA_STAGING_PATH }}/skia-org" 

    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v4.6.0
      with:
        name: skia-org-images-x86_64-pc-windows-msvc
        path: ${{ env.SKIA_STAGING_PATH }}/skia-org

    - name: 'Compress binaries'
      if: false
      uses: a7ul/tar-action@v1.1.2
      with:
        command: c
        cwd: '${{ env.SKIA_STAGING_PATH }}'
        files: 'skia-binaries'
        outPath: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'

    - name: 'Release binaries'
      if: false
      uses: pragmatrix/release-action@v1.11.1-rs
      with:
        owner: rust-skia
        repo: skia-binaries
        allowUpdates: true
        replacesArtifacts: true
        tag: '${{ env.SKIA_BINARIES_TAG }}'
        artifacts: '${{ runner.temp }}/skia-binaries-${{ env.SKIA_BINARIES_KEY }}.tar.gz'
        artifactErrorsFailBuild: true
        token: ${{ secrets.RUST_SKIA_RELEASE_TOKEN }}
        prerelease: true